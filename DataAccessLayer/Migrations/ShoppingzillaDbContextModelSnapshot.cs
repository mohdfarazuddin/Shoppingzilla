// <auto-generated />
using System;
using DataAccessLayer.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(ShoppingzillaDbContext))]
    partial class ShoppingzillaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("DataAccessLayer.Entities.Brands", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("SubCategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryID");

                    b.ToTable("tbl_Brands");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.CartItems", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModelID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("UserID", "ModelID");

                    b.HasIndex("ModelID");

                    b.ToTable("tbl_CartItems");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Categories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("tbl_Categories");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.DeliveryAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PinCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("tbl_DeliveryAddresses");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.LoginCredentials", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailID")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("EmailID")
                        .IsUnique();

                    b.ToTable("tbl_LoginCredentials");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Models", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Colour")
                        .HasColumnType("nvarchar(15)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("imgurl")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ProductID");

                    b.ToTable("tbl_Models");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.OrderDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("smalldatetime");

                    b.Property<Guid>("DeliveryAddID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderStatusID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentModeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<string>("TransactionID")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryAddID");

                    b.HasIndex("OrderStatusID");

                    b.HasIndex("PaymentModeID");

                    b.HasIndex("UserID");

                    b.ToTable("tbl_OrderDetails");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.OrderItems", b =>
                {
                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModelID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderID", "ModelID");

                    b.HasIndex("ModelID");

                    b.ToTable("tbl_OrderItems");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.OrderStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("tbl_OrderStatus");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PaymentModes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("tbl_PaymentModes");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Products", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BrandID");

                    b.ToTable("tbl_Products");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.RefreshTokens", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserID");

                    b.ToTable("tbl_RefreshTokens");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("tbl_Roles");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.SubCategories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryID");

                    b.ToTable("tbl_SubCategories");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.UserDetails", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.HasIndex("RoleID");

                    b.ToTable("tbl_UserDetails");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Brands", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.SubCategories", "SubCategory")
                        .WithMany("Brands")
                        .HasForeignKey("SubCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.CartItems", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Models", "Model")
                        .WithMany("Carts")
                        .HasForeignKey("ModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.UserDetails", "User")
                        .WithMany("CartItems")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.DeliveryAddress", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.UserDetails", "User")
                        .WithMany("DeliveryAddresses")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Models", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Products", "Product")
                        .WithMany("Models")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.OrderDetails", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.DeliveryAddress", "DeliveryAddress")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryAddID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.PaymentModes", "PaymentType")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentModeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.UserDetails", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryAddress");

                    b.Navigation("OrderStatus");

                    b.Navigation("PaymentType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.OrderItems", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Models", "Model")
                        .WithMany("Orders")
                        .HasForeignKey("ModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.OrderDetails", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Products", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Brands", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.RefreshTokens", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.UserDetails", "user")
                        .WithOne("RefreshToken")
                        .HasForeignKey("DataAccessLayer.Entities.RefreshTokens", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.SubCategories", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Categories", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.UserDetails", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Roles", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.LoginCredentials", "Logincredential")
                        .WithOne("User")
                        .HasForeignKey("DataAccessLayer.Entities.UserDetails", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Logincredential");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Brands", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Categories", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.DeliveryAddress", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.LoginCredentials", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Models", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.OrderDetails", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.PaymentModes", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Products", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Roles", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.SubCategories", b =>
                {
                    b.Navigation("Brands");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.UserDetails", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("DeliveryAddresses");

                    b.Navigation("Orders");

                    b.Navigation("RefreshToken");
                });
#pragma warning restore 612, 618
        }
    }
}
